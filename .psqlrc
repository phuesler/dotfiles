-----------------------------------------------------------------------------------------------------------------
-- psqlrc file to set psql preferences --
-- Based of the works of Prashanth Goripath http://opensourcedbms.com/dbms/psqlrc-psql-startup-file-for-postgres/
-----------------------------------------------------------------------------------------------------------------

\set QUIET ON

\set HISTFILE ~/.psql_history- :HOST - : DBNAME -- Remove space between : and DBNAME
\set HISTSIZE 2000
\set ECHO_HIDDEN ON

\timing
\encoding unicode

\pset null 'NULL'
\pset border 2

\set QUIET OFF

\echo '\nCurrent Host Server Date Time : '`date` '\n'

\echo 'Administrative queries:\n'
\echo '\t\t\t:settings\t-- Server Settings'
\echo '\t\t\t:conninfo\t-- Server connections'
\echo '\t\t\t:activity\t-- Server activity'
\echo '\t\t\t:locks\t\t-- Lock info'
\echo '\t\t\t:waits\t\t-- Waiting queires'
\echo '\t\t\t:dbsize\t\t-- Database Size'
\echo '\t\t\t:tablesize\t-- Tables Size'
\echo '\t\t\t:uselesscol\t-- Useless columns'
\echo '\t\t\t:uptime\t\t-- Server uptime'

--- Heroku pg extension queries
\echo '\t\t\t:cachehit\t-- Cache hit ratio'
\echo '\t\t\t:indexusage\t-- Index usage'
\echo '\t\t\t:unusedindices\t-- Unused indices'
\echo '\t\t\t:indexsize\t-- Index size'
\echo '\t\t\t:totalindexsize\t-- Total Index size'
\echo '\t\t\t:vacuumstats\t-- Vacuum Stats'
\echo '\t\t\t:longrunningqueries --  Long running queries'
\echo '\t\t\t:outliers\t--  Outliers'


\echo '\t\t\t:menu\t\t-- Help Menu'
\echo '\t\t\t\\h\t\t-- Help with SQL commands'
\echo '\t\t\t\\?\t\t-- Help with psql commands\n'

\echo 'Development queries:\n'
\echo '\t\t\t:sp\t\t-- Current Search Path'
\echo '\t\t\t:clear\t\t-- Clear screen'
\echo '\t\t\t:ll\t\t-- List\n'

-- Administration queries

\set menu '\\i ~/.psqlrc'

\set settings 'select name, setting,unit,context from pg_settings;'

\set locks  'SELECT bl.pid AS blocked_pid, a.usename AS blocked_user, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement FROM pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a ON bl.pid = a.pid JOIN pg_catalog.pg_locks kl JOIN pg_catalog.pg_stat_activity ka ON kl.pid = ka.pid ON bl.transactionid = kl.transactionid AND bl.pid != kl.pid WHERE NOT bl.granted;'

\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'

\set activity 'select datname, pid, usename, application_name,client_addr, client_hostname, client_port, query, state from pg_stat_activity;'

\set waits 'SELECT pg_stat_activity.pid, pg_stat_activity.query, pg_stat_activity.waiting, now() - pg_stat_activity.query_start AS \"totaltime\", pg_stat_activity.backend_start FROM pg_stat_activity WHERE pg_stat_activity.query !~ \'%IDLE%\'::text AND pg_stat_activity.waiting = true;'

\set dbsize 'SELECT datname, pg_size_pretty(pg_database_size(datname)) db_size FROM pg_database ORDER BY db_size;'

\set tablesize 'SELECT nspname || \'.\' || relname AS \"relation\", pg_size_pretty(pg_relation_size(C.oid)) AS "size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (\'pg_catalog\', \'information_schema\') ORDER BY pg_relation_size(C.oid) DESC LIMIT 40;'

\set uselesscol 'SELECT nspname, relname, attname, typname, (stanullfrac*100)::int AS null_percent, case when stadistinct &gt;= 0 then stadistinct else abs(stadistinct)*reltuples end AS \"distinct\", case 1 when stakind1 then stavalues1 when stakind2 then stavalues2 end AS \"values\" FROM pg_class c JOIN pg_namespace ns ON (ns.oid=relnamespace) JOIN pg_attribute ON (c.oid=attrelid) JOIN pg_type t ON (t.oid=atttypid) JOIN pg_statistic ON (c.oid=starelid AND staattnum=attnum) WHERE nspname NOT LIKE E\'pg\\\\_%\' AND nspname != \'information_schema\' AND relkind=\'r\' AND NOT attisdropped AND attstattarget != 0 AND reltuples &gt;= 100 AND stadistinct BETWEEN 0 AND 1 ORDER BY nspname, relname, attname;'

\set uptime 'select now() - pg_postmaster_start_time() AS uptime;'

\set cachehit 'SELECT \'index hit rate\' AS name, (sum(idx_blks_hit)) / sum(idx_blks_hit + idx_blks_read) AS ratio FROM pg_statio_user_indexes UNION ALL SELECT \'cache hit rate\' AS name, sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) AS ratio FROM pg_statio_user_tables;'

\set indexusage 'SELECT relname, CASE idx_scan WHEN 0 THEN \'Insufficient data\' ELSE (100 * idx_scan / (seq_scan + idx_scan))::text END percent_of_times_index_used, n_live_tup rows_in_table FROM pg_stat_user_tables ORDER BY n_live_tup DESC;'

\set unusedindices 'SELECT schemaname || \'.\' || relname AS table, indexrelname AS index, pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size, idx_scan as index_scans FROM pg_stat_user_indexes ui JOIN pg_index i ON ui.indexrelid = i.indexrelid WHERE NOT indisunique AND idx_scan < 50 AND pg_relation_size(relid) > 5 * 8192 ORDER BY pg_relation_size(i.indexrelid) / nullif(idx_scan, 0) DESC NULLS FIRST, pg_relation_size(i.indexrelid) DESC;'

\set indexsize 'SELECT relname AS name, pg_size_pretty(sum(relpages::bigint*8192)::bigint) AS size FROM pg_class WHERE reltype = 0 GROUP BY relname ORDER BY sum(relpages) DESC;'

\set totalindexsize 'SELECT pg_size_pretty(sum(relpages::bigint*8192)::bigint) AS size FROM pg_class WHERE reltype = 0;'

\set vacuumstats 'WITH table_opts AS ( SELECT pg_class.oid, relname, nspname, array_to_string(reloptions, \'\') AS relopts FROM pg_class INNER JOIN pg_namespace ns ON relnamespace = ns.oid), vacuum_settings AS ( SELECT oid, relname, nspname, CASE WHEN relopts LIKE \'%autovacuum_vacuum_threshold%\' THEN regexp_replace(relopts, \'.*autovacuum_vacuum_threshold=([0-9.]+).*\', E\'\\\\\\1\')::integer ELSE current_setting(\'autovacuum_vacuum_threshold\')::integer END AS autovacuum_vacuum_threshold, CASE WHEN relopts LIKE \'%autovacuum_vacuum_scale_factor%\' THEN regexp_replace(relopts, \'.*autovacuum_vacuum_scale_factor=([0-9.]+).*\', E\'\\\\\\1\')::real ELSE current_setting(\'autovacuum_vacuum_scale_factor\')::real END AS autovacuum_vacuum_scale_factor FROM table_opts) SELECT vacuum_settings.nspname AS schema, vacuum_settings.relname AS table, to_char(psut.last_vacuum, \'YYYY-MM-DD HH24:MI\') AS last_vacuum, to_char(psut.last_autovacuum, \'YYYY-MM-DD HH24:MI\') AS last_autovacuum, to_char(pg_class.reltuples, \'9G999G999G999\') AS rowcount, to_char(psut.n_dead_tup, \'9G999G999G999\') AS dead_rowcount, to_char(autovacuum_vacuum_threshold + (autovacuum_vacuum_scale_factor::numeric * pg_class.reltuples), \'9G999G999G999\') AS autovacuum_threshold, CASE WHEN autovacuum_vacuum_threshold + (autovacuum_vacuum_scale_factor::numeric * pg_class.reltuples) < psut.n_dead_tup THEN \'yes\' END AS expect_autovacuum FROM pg_stat_user_tables psut INNER JOIN pg_class ON psut.relid = pg_class.oid INNER JOIN vacuum_settings ON pg_class.oid = vacuum_settings.oid ORDER BY 1; '

\set longrunningqueries 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query FROM pg_stat_activity WHERE pg_stat_activity.query <> \'\'::text AND state <> \'idle\' AND now() - pg_stat_activity.query_start > interval \'5 minutes\' ORDER BY now() - pg_stat_activity.query_start DESC;'

\set outliers 'SELECT query, time, calls, hits FROM ( SELECT query, (total_time/calls) AS time, calls, AVG(calls) OVER () AS avg_calls, AVG(total_time/calls) OVER () AS avg_time, 100.0 * shared_blks_hit / nullif(shared_blks_hit + shared_blks_read, 0) AS hits FROM pg_stat_statements WHERE userid = (SELECT usesysid FROM pg_user WHERE usename = current_user LIMIT 1)) AS ss WHERE calls > avg_calls AND time > avg_time ORDER BY hits ASC, calls DESC, avg_time ASC;'

-- Development queries:

\set sp 'SHOW search_path;'
\set clear '\\! clear;'
\set ll '\\! ls -lrt;'
